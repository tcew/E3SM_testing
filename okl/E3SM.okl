

@kernel void E3SM_divFlux(const dlong Nelements,
			  @restrict const dfloat *geofacs,
			  @restrict const dfloat *Dh, // ref D matrix in horizontal
			  @restrict const dfloat *Dv, // ref D matrix in vertical
			  @restrict const dfloat *q,
			  @restrict const dfloat *divFluxq){
  
  for(dlong eo=0;eo<Nelements;++eo;@outer(0)){
    
    shared dfloat s_Dh[p_Nq][p_Nq];
    shared dfloat s_Dv[p_Nq][p_Nstencil];
    
    shared dfloat s_fx[p_Nfields][p_Nq][p_Nq];
    shared dfloat s_fy[p_Nfields][p_Nq][p_Nq];

    // should be exclusive (but only allowd 1D exclusive arrays)
    dfloat r_fx[p_Nstencil][p_Nfields];
    dfloat r_fy[p_Nstencil][p_Nfields];
    dfloat r_fz[p_Nstencil][p_Nfields];    
    
    exclusive dfloat r_drdx, r_drdy, r_dsdx, r_dsdy, r_dtdz;
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	
	// fetch D to shared
	s_Dh[j][i] = Dh[j*p_Nq+i];
	
	int n = i + j*p_Nq;
	while(n<(p_Nq*p_Nstencil)){
	  s_Dv[0][n] = Dv[n];
	  n += p_Nq*p_Nq;
	}
	
	const dlong e = eo;
	if(e<Nelements){
	  dfloat r_q [p_Nfields];

	  const dlong base = e*p_Nz*p_Nq*p_Nq*Nfields + j*p_Nq + i;
	  
	  // fetch first stencil to register
	  @unroll(p_Nstencil)
	    for(int k=0;k<p_Nstencil;++k){
	      @unroll(p_Nfields)
		for(int fld=0;fld<p_Nfields;++fld){
		  const dlong id  = base + p_Nq*p_Nq*k + fld*p_Nz*p_Nq*p_Nq;
		  r_q[fld] = q[id];
		}
	      
	      fluxFunctions(r_q, r_fx[k], r_fy[k], r_fz[k]);
	    }
	  
	  // assume horizontal geofacs are independent of vertical
	  // Jacobian matrix
	  // [ x x 0 ]
	  // [ x x 0 ]
	  // [ 0 0 x ]
	  dlong gid = e*p_Nq*p_Nq*p_Nvgeo + j*p_Nq + i;
	  r_drdx = vgeo[gid + p_RXID*p_Nq*p_Nq];
	  r_dsdx = vgeo[gid + p_SXID*p_Nq*p_Nq];
	  r_drdy = vgeo[gid + p_RYID*p_Nq*p_Nq];
	  r_dsdy = vgeo[gid + p_SYID*p_Nq*p_Nq];
	  r_dtdz = vgeo[gid + p_TZID*p_Nq*p_Nq];
	}
      }
    }
    
    // loop over z (radial axis)
    @unroll(p_Nz)
      for(int k=0;k<p_Nz;++k){
	
	// roll q if in moving stencil regime
	if(k>=p_Nstencil && k<p_Nz-p_Nstencil){ // check this logic
	  @unroll(p_Nstencil)
	    for(int ks=1;ks<p_Nstencil;++ks){	  
	      r_fx[ks-1] = r_fx[ks];
	      r_fy[ks-1] = r_fy[ks];
	      r_fz[ks-1] = r_fz[ks];
	    }
	  // compute flux at level k
	  fluxFunctions(r_q, r_fx[p_Nstencil-1], r_fy[p_Nstencil-1], r_fz[p_Nstencil-1]);
	}

	// make sure s_fx, s_fy is safe to write to 
	@barrier("local");

	// share horizontal fluxes
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	    for(int fld=0;fld<p_Nfields;++fld){
	      s_fx[fld][j][i] = r_fx[k][fld];
	      s_fy[fld][j][i] = r_fy[k][fld];
	    }
	  }
	}
	
	// make sure s_fx, s_fy stored
	@barrier("local");
	
	// horizontal and vertical divergence
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	    
	    // compute horizontal derivatives 
	    dfloat fxr[p_Nfields], fxs[p_Nfields];
	    dfloat fyr[p_Nfields], fys[p_Nfields];

	    // vertical derivatives
	    dfloat fzt[p_Nfields];

	    for(int fld=0;fld<p_Nfields;++fld){
	      fxr[fld] = 0;
	      fxs[fld] = 0;
	      fyr[fld] = 0;
	      fys[fld] = 0;
	      fzt[fld] = 0;
	    }
	    
	    for(int n=0;n<p_Nq;++n){
	      const dfloat Din = s_Dh[i][n];
	      const dfloat Djn = s_Dh[j][n];

	      for(int fld=0;fld<p_Nfields;++fld){
		fxr[fld] += Din*s_fx[fld][j][n];
		fxs[fld] += Djn*s_fx[fld][n][i];
		
		fyr[fld] += Din*s_fy[fld][j][n];
		fys[fld] += Djn*s_fy[fld][n][i];
	      }
	    }

	    for(int n=0;n<p_Nstencil;++n){
	      const dfloat Dkn = s_Dv[k][n];
	      for(int fld=0;fld<p_Nfields;++fld){
		fzt[fld] += Dkn*r_fz[fld];
	      }
	    }
	    
	    const dlong base = e*p_Nz*p_Nq*p_Nq*Nfields + j*p_Nq + i;

	    for(int fld=0;fld<p_Nfields;++fld){
	      const dlong id  = base + p_Nq*p_Nq*k + fld*p_Nz*p_Nq*p_Nq;
	      divFlux[base] = 
		drdx*fxr[fld] + dsdx*fxs[fld] + 
		drdy*fyr[fld] + dsdy*fys[fld] + 
		dtdz*fzt[fld];
	    }
	  }
	}
      }
  }    
  
}
